% Equivalence of the simply typed lambda calculus and SKI combinators.

term : type.
app : term -> term -> term.
lam : (term -> term) -> term.
cterm : type.
s : cterm.
k : cterm.
i : cterm.
capp : cterm -> cterm -> cterm.

step : term -> term -> type.
s-beta :
   {M1:term -> term} {M2:term} step (app (lam ([x:term] M1 x)) M2) (M1 M2).
s-1 :
   {M1:term} {M1':term} {M2:term} step M1 M1' -> step (app M1 M2) (app M1' M2).
s-2 :
   {M2:term} {M2':term} {M1:term} step M2 M2' -> step (app M1 M2) (app M1 M2').
cstep : cterm -> cterm -> type.
cs-i : {X:cterm} cstep (capp i X) X.
cs-k : {X:cterm} {Y:cterm} cstep (capp (capp k X) Y) X.
cs-s :
   {X:cterm} {Y:cterm} {Z:cterm}
      cstep (capp (capp (capp s X) Y) Z) (capp (capp X Z) (capp Y Z)).
cs-1 :
   {X:cterm} {X':cterm} {Y:cterm} cstep X X' -> cstep (capp X Y) (capp X' Y).
cs-2 :
   {Y:cterm} {Y':cterm} {X:cterm} cstep Y Y' -> cstep (capp X Y) (capp X Y').
cstep* : cterm -> cterm -> type.
cs-cons :
   {N':cterm} {N'':cterm} {N:cterm} cstep* N' N'' -> cstep N N' -> cstep* N N''.
cs-nil : {N:cterm} cstep* N N.
cs-1* :
   {N1:cterm} {N1':cterm} {N2:cterm}
      cstep* N1 N1' -> cstep* (capp N1 N2) (capp N1' N2) -> type.
cs-2* :
   {N2:cterm} {N2':cterm} {N1:cterm}
      cstep* N2 N2' -> cstep* (capp N1 N2) (capp N1 N2') -> type.
cs-trans :
   {N1:cterm} {N2:cterm} {N3:cterm}
      cstep* N1 N2 -> cstep* N2 N3 -> cstep* N1 N3 -> type.
trans : term -> cterm -> type.
bracket : (cterm -> cterm) -> cterm -> type.
t-app :
   {M2:term} {N2:cterm} {M1:term} {N1:cterm}
      trans M2 N2 -> trans M1 N1 -> trans (app M1 M2) (capp N1 N2).
t-lam :
   {N:cterm -> cterm} {N':cterm} {M:term -> term}
      bracket ([y:cterm] N y) N'
         -> ({x:term} {y:cterm} trans x y -> trans (M x) (N y))
         -> trans (lam ([x:term] M x)) N'.
b-i : bracket ([x:cterm] x) i.
b-k : {Y:cterm} bracket ([x:cterm] Y) (capp k Y).
b-s :
   {N2:cterm -> cterm} {N2':cterm} {N1:cterm -> cterm} {N1':cterm}
      bracket ([x:cterm] N2 x) N2' -> bracket ([x:cterm] N1 x) N1'
         -> bracket ([x:cterm] capp (N1 x) (N2 x)) (capp (capp s N1') N2').

%solve t :
  trans
    (lam ([f : term] lam ([x : term]
      (app f (app f x))
    )))
    C.

%solve t50 :
  trans
    (lam ([f : term] lam ([x : term]
      (app f (app f (app f (app f (app f (app f (app f (app f (app f (app f
      (app f (app f (app f (app f (app f (app f (app f (app f (app f (app f
      (app f (app f (app f (app f (app f (app f (app f (app f (app f (app f
      (app f (app f (app f (app f (app f (app f (app f (app f (app f (app f
      (app f (app f (app f (app f (app f (app f (app f (app f (app f (app f
        x
      ))))))))))))))))))))))))))))))))))))))))))))))))))
    )))
    C.

