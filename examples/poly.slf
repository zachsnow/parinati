nat : type.
z : nat.
s : nat -> nat.

list : type -> type.
nil : <t : type> list t.
cons : <t : type> t -> list t -> list t.

append : <t : type> list t -> list t -> list t -> type.
append-nil : <t : type> {l : list t} append t (nil t) l l.
append-cons : <t : type> {x : t} {l : list t} {k : list t} {m : list t}
  append t l k m -> append t (cons t x l) k (cons t x m).

%solve test : append X (cons Y z (nil Z)) (nil W) N.
